//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2023 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	ЮТТесты
		.ВТранзакции().УдалениеТестовыхДанных()
		.ДобавитьТест("ОбработкаПроведения_ФормрованиеДвижений")
		.ДобавитьТест("ОбработкаПроведения_Проверки").ВТранзакции(Ложь)
		.ДобавитьТест("ОбработкаПроведения_ПроверкиЗаполнения")
	;
	
КонецПроцедуры

Процедура ОбработкаПроведения_ФормрованиеДвижений() Экспорт
	
	ВидАтракциона = ЮТест.Данные().СоздатьЭлемент(Справочники.ВидыАттракционов);
	Аттракцион = ПомощникТестирования.Аттракцион(ВидАтракциона);
	Билет = ПомощникТестирования.Номенклатура(1, ВидАтракциона);
	ПродажаБилета = ПомощникТестирования.ПродажаБилета(1, Билет);
	
	Документ = ЮТест.Данные().КонструкторОбъекта(Документы.ПосещениеАттракциона)
		.Установить("Аттракцион", Аттракцион)
		.Установить("Основание", ПродажаБилета)
		.Фикция("Комментарий")
		.Провести();
	
	Движения = ЮТЗапросы.ДвиженияДокумента(Документ, "РегистрНакопления.АктивныеПосещения");
	ЮТест.ОжидаетЧто(Движения)
		.ИмеющееПредставление("движения документа по РегистрНакопления.АктивныеПосещения")
		.Заполнено()
		.ИмеетДлину(1)
		.Свойство("[0].ВидДвижения").Равно(ВидДвиженияНакопления.Расход)
		.Свойство("[0].Основание").Равно(ПродажаБилета)
		.Свойство("[0].КоличествоПосещений").Равно(1)
	;
	
КонецПроцедуры

Процедура ОбработкаПроведения_Проверки_в1() Экспорт
	
	// Не указано основание
	Документ = ЮТест.Данные().КонструкторОбъекта(Документы.ПосещениеАттракциона)
		.Фикция("Аттракцион")
		.Фикция("Комментарий")
		.НовыйОбъект();
	
	ЮТест.ОжидаетЧто(Документ)
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)
		.ВыбрасываетИсключение("Не удалось");
	
	ЮТест.ОжидаетЧто(ПомощникТестирования.Сообщения(Истина), "Сообщения пользователю")
		.Содержит("В билете не осталось посещений.");
	
	// Потрачены все посещения
	Билет = ПомощникТестирования.Номенклатура(1);
	ПродажаБилета = ПомощникТестирования.ПродажаБилета(1, Билет);
	Документ = ЮТест.Данные().КонструкторОбъекта(Документы.ПосещениеАттракциона)
		.Фикция("Аттракцион")
		.Установить("Основание", ПродажаБилета)
		.Фикция("Комментарий")
		.Провести();
	
	Документ = ЮТест.Данные().КонструкторОбъекта(Документы.ПосещениеАттракциона)
		.Фикция("Аттракцион")
		.Установить("Основание", ПродажаБилета)
		.Фикция("Комментарий")
		.НовыйОбъект();
	
	ЮТест.Пауза(1);
	ЮТест.ОжидаетЧто(Документ)
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)
		.ВыбрасываетИсключение("Не удалось");
	
	ЮТест.ОжидаетЧто(ПомощникТестирования.Сообщения(Истина), "Сообщения пользователю")
		.Содержит("В билете не осталось посещений.");
	
КонецПроцедуры

Процедура ОбработкаПроведения_Проверки() Экспорт
	
	// --------------------------------------------
	Описание = "Не указано основание";
	ВидАтракциона = ЮТест.Данные().СоздатьЭлемент(Справочники.ВидыАттракционов);
	Аттракцион = ПомощникТестирования.Аттракцион(ВидАтракциона);
	
	Конструктор = ЮТест.Данные().КонструкторОбъекта(Документы.ПосещениеАттракциона)
		.Установить("Аттракцион", Аттракцион);
	
	ЮТест.ОжидаетЧто(Конструктор.НовыйОбъект(), Описание)
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)
		.ВыбрасываетИсключение("Не удалось");
	
	ЮТест.ОжидаетЧто(ПомощникТестирования.Сообщения(Истина), Описание)
		.Содержит("В билете не осталось посещений.");
	
	// --------------------------------------------
	Описание = "Потрачены все посещения";
	Билет = ПомощникТестирования.Номенклатура(1, ВидАтракциона);
	ПродажаБилета = ПомощникТестирования.ПродажаБилета(1, Билет);
	
	Конструктор
		.Установить("Основание", ПродажаБилета)
		.Провести();
	
	ЮТест.ОжидаетЧто(Конструктор.НовыйОбъект(), Описание)
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)
		.ВыбрасываетИсключение("Не удалось");
	
	ЮТест.ОжидаетЧто(ПомощникТестирования.Сообщения(Истина), Описание)
		.Содержит("В билете не осталось посещений.");
	
	// --------------------------------------------
	Описание = "Билет не подходит для посещения этого аттракциона.";
	Конструктор
		.Установить("Аттракцион", ПомощникТестирования.Аттракцион())
		.Установить("Основание", ПомощникТестирования.ПродажаБилета(1, Билет))
	;
	
	ЮТест.ОжидаетЧто(Конструктор.НовыйОбъект(), Описание)
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)
		.ВыбрасываетИсключение("Не удалось");
	
	ЮТест.ОжидаетЧто(ПомощникТестирования.Сообщения(Истина), Описание)
		.Содержит("Билет не подходит для посещения этого аттракциона.");
	
КонецПроцедуры

Процедура ОбработкаПроведения_ПроверкиЗаполнения() Экспорт
	
	Документ = Документы.ПосещениеАттракциона.СоздатьДокумент();
	
	Описание = "Незаполненный документ";
	ЮТест.ОжидаетЧто(Документ.ПроверитьЗаполнение())
		.ЭтоЛожь();
	
	ЮТест.ОжидаетЧто(ПомощникТестирования.Сообщения(Истина), Описание)
		.Содержит("Поле ""Аттракцион"" не заполнено")
		.Содержит("Поле ""Основание"" не заполнено")
		.Содержит("Поле ""Дата"" не заполнено")
	;
	
	Документ.Дата = ЮТест.Данные().СлучайнаяДата();
	Документ.Аттракцион = ПомощникТестирования.Аттракцион();
	Документ.Основание = ПомощникТестирования.ПродажаБилета();
	
	Описание = "Заполненный документ";
	ЮТест.ОжидаетЧто(Документ.ПроверитьЗаполнение())
		.ЭтоИстина();
	ЮТест.ОжидаетЧто(ПомощникТестирования.Сообщения(Истина), Описание)
		.НеЗаполнено();
	
КонецПроцедуры

#КонецОбласти
